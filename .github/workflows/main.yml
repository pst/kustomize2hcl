name: Run Tests

on: push

env:
  GO_VERSION: ">=1.15"
  TERRAFORM_VERSION: "0.13.4"

jobs:
  tf_acc_tests:
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v1

    - name: 'Setup Kind'
      uses: engineerd/setup-kind@v0.1.0
      with:
        version: "v0.6.1"

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: "${{ env.GO_VERSION }}"

    - name: 'Run TF acceptance tests'
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path --name="kind")"
        make test
      env:
        TF_ACC: '1'

  compile_provider:
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v1

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: "${{ env.GO_VERSION }}"

    - name: Run goreleaser build
      if: startsWith(github.ref, 'refs/tags/v')
      uses: kbst/goreleaser-action@v2
      with:
        version: latest
        args: build --config .goreleaser-build.yml --rm-dist

    - name: Run goreleaser build --snapshot
      if: startsWith(github.ref, 'refs/tags/v') == false
      uses: kbst/goreleaser-action@v2
      with:
        version: latest
        args: build --config .goreleaser-build.yml --rm-dist --snapshot

    - name: 'Prepare terraform-plugins'
      run: |
        mkdir -p ./dist/.terraform/plugins/registry.terraform.io/kbst/kustomization/1.0.0/linux_amd64
        cp ./dist/terraform-provider-kustomization_linux_amd64/terraform-provider-kustomization_v* ./dist/.terraform/plugins/registry.terraform.io/kbst/kustomization/1.0.0/linux_amd64/terraform-provider-kustomization_v1.0.0

    - name: 'Upload terraform-plugins'
      uses: actions/upload-artifact@v2
      with:
        name: terraform-plugins
        path: dist/.terraform/plugins

  int_test_kubeconfig_path:
    runs-on: ubuntu-latest
    needs: [compile_provider]

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.0
      with:
        terraform_wrapper: false
        terraform_version: "${{ env.TERRAFORM_VERSION }}"

    - name: 'Download terraform-plugins'
      uses: actions/download-artifact@v2
      with:
        name: terraform-plugins
        path: .terraform/plugins

    - name: 'Ensure provider is executable'
      run: chmod +x .terraform/plugins/registry.terraform.io/kbst/kustomization/1.0.0/linux_amd64/terraform-provider-kustomization_v1.0.0

    - name: 'Setup Kind'
      uses: engineerd/setup-kind@v0.1.0
      with:
        version: "v0.6.1"

    - name: 'Set KUBECONFIG env var'
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path --name="kind")"

    - name: 'Terraform Init'
      run: terraform init

    - name: 'Terraform Apply'
      run: terraform apply --auto-approve

  int_test_kubeconfig_raw:
    runs-on: ubuntu-latest
    needs: [compile_provider]

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v1

    - name: 'Setup Kind'
      uses: engineerd/setup-kind@v0.1.0
      with:
        version: "v0.6.1"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.0
      with:
        terraform_wrapper: false
        terraform_version: "${{ env.TERRAFORM_VERSION }}"

    - name: 'Download terraform-plugins'
      uses: actions/download-artifact@v2
      with:
        name: terraform-plugins
        path: .terraform/plugins

    - name: 'Ensure provider is executable'
      run: chmod +x .terraform/plugins/registry.terraform.io/kbst/kustomization/1.0.0/linux_amd64/terraform-provider-kustomization_v1.0.0

    - name: 'Create provider.tf with kubeconfig_raw'
      run: |
        unset KUBECONFIG
        echo "provider "kustomization" {" > provider.tf
        echo "  kubeconfig_raw = <<EOT" >> provider.tf
        cat $(kind get kubeconfig-path --name="kind") >> provider.tf
        echo "EOT" >> provider.tf
        echo "}" >> provider.tf

    - name: 'Terraform Init'
      run: terraform init

    - name: 'Terraform Apply'
      run: terraform apply --auto-approve

  int_test_state_import:
    runs-on: ubuntu-latest
    needs: [compile_provider]

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v1

    - name: 'Setup Kind'
      uses: engineerd/setup-kind@v0.1.0
      with:
        version: "v0.6.1"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.0
      with:
        terraform_wrapper: false
        terraform_version: "${{ env.TERRAFORM_VERSION }}"

    - name: 'Download terraform-plugins'
      uses: actions/download-artifact@v2
      with:
        name: terraform-plugins
        path: .terraform/plugins

    - name: 'Ensure provider is executable'
      run: chmod +x .terraform/plugins/registry.terraform.io/kbst/kustomization/1.0.0/linux_amd64/terraform-provider-kustomization_v1.0.0

    - name: 'Set KUBECONFIG env var'
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path --name="kind")"

    - name: 'Download kustomize'
      run: |
        wget https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv3.5.4/kustomize_v3.5.4_linux_amd64.tar.gz
        sudo tar -C /usr/local/bin -xvf kustomize_v3.5.4_linux_amd64.tar.gz
        kustomize version

    - name: 'Kubectl apply'
      run: |
        kustomize build test_kustomizations/basic/initial | kubectl apply -f -

    - name: 'Terraform Init'
      run: terraform init

    - name: 'Terraform Import'
      run: |
        terraform import 'kustomization_resource.test["~G_v1_Namespace|~X|test-basic"]' '~G_v1_Namespace|~X|test-basic'
        terraform import 'kustomization_resource.test["apps_v1_Deployment|test-basic|test"]' 'apps_v1_Deployment|test-basic|test'
        terraform import 'kustomization_resource.test["~G_v1_Service|test-basic|test"]' '~G_v1_Service|test-basic|test'
        terraform import 'kustomization_resource.test["networking.k8s.io_v1beta1_Ingress|test-basic|test"]' 'networking.k8s.io_v1beta1_Ingress|test-basic|test'

    - name: 'Terraform Apply'
      run: terraform apply --auto-approve

  goreleaser:
    runs-on: ubuntu-latest
    needs: [tf_acc_tests, int_test_kubeconfig_path, int_test_kubeconfig_raw, int_test_state_import]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "${{ env.GO_VERSION }}"

      - name: Import GPG key
        id: import_gpg
        uses: kbst/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Run goreleaser release
        uses: kbst/goreleaser-action@v2
        with:
          version: latest
          args: release
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
